/**
 * Solution written in C++ for the Linked List Cycle II question on LeetCode. Assumes the linked list has more than one element.
 * Uses Floyd's Algorithm.
 */
 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        
        ListNode* tortoise = head;
        ListNode* hare = head;
        //bool foundCycle = false;
        
        while (tortoise != NULL && hare != NULL) {
            tortoise = tortoise->next; // moves the tortoise slower than the hare by 1
            
            if (hare->next == NULL) { 
                return NULL;
            } 
            
            hare = hare->next->next; // moves the hare faster than the tortoise by 1
            
            if (tortoise == hare) {
                //foundCycle = true;
                break;
            }
        }
        
        /*if (!foundCycle) {
            return NULL;
        } */
        if (tortoise == NULL || hare == NULL) {
            return NULL;
        }
        tortoise = head; // returns the tortoise to the beginning of the linked list
        while (tortoise != hare) {
            tortoise = tortoise->next;
            hare = hare->next;
        } // second intersection by Floyd's algorithm is at the start of the loop
        
        return tortoise;
    }
};
